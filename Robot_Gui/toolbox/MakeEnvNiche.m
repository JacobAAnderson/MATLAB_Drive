function MakeEnvNiche(~)
global DATA;            % Sensor data
global EnvWindow;       % Environmental Niche Modeling GUI window
global Model;           % Area model being developed by this app
global shape;           % List of waypoints provided by the user. Waypoints outline the area of interest
global Boundaries;      % The different areas found when evaluating the OccupancyGrid
global xGrid;
global yGrid;
global geoImage;
global geoData;

% Set up data structure to hold thet model generated by the GUI
% Perhaps change this to reflect the tools that are present
Model  = struct('MapParameter',     {},    ...
                'ParamiterSettings',[1,0], ...
                'WaterMapIO',       false, ...
                'ParameterStats',   [],    ...
                'WaterMap',         {},    ...
                'Data',             [],    ...
                'Vehicle',          [],    ...
                'Header',           {} );


% Read data header to set up the new window -----------------------------------------------------------------------------------------------------------
header = DATA(1).header;
header = strsplit(header{4},{':',','});     % Header for the water chemistry matrix
header = header(2:end);                          % Eliminate the header label from the header


Data    = cat(1,DATA.wqData);        % Water chemistry
vehicle = cat(1,DATA.vehicle);       % Vehicle location: Latitude, Longitude, Depth from surface


Model(1).Data     =  Data ;
Model(1).Vehicle  =  vehicle ;
Model(1).Header   =  header ;
  
% Get stats on the data being processed
dataMax  = max(Data,[],1);
dataMean = mean(Data,1);
dataSTD  = std(Data,1);
dataMin  = min(Data,[],1);

% Make new window ----------------------------------------------------------------------------------------------------------------------------------------
windowName = 'Environmental Niche Modeling';
panelName  = 'Parameters';

EnvWindow = GUIwindow(windowName);                                         % Instanciate the GUI
EnvWindow.GUIpanels(panelName,'make','position',[0.8 0 0.2 1],'backgroundcolor',[0.4706  0.6706  0.1882]);  % Create putton panel for primary GUI functions

EnvWindow.Header.String = 'Generating Model Area';                             % Prompt to select data
EnvWindow.Header.BackgroundColor = [0.4706  0.6706  0.6];

% Display data States. on a table the table
t = uitable(EnvWindow.Figure,'Data',[dataMax; dataMean; dataMin; dataSTD], 'Units','Normalized','Position',[0. 0.825 0.625 0.125]);
t.RowName = {'Data Max', 'Data Mean', 'Data Min', 'Data STD'};
t.ColumnName = header;

set(EnvWindow.Figure, 'pointer', 'watch')
drawnow;

% Add a button to the main panel for each water peramiter
for ii = 1: length(header)    
    EnvWindow.GUIbuttons( panelName,'add',{'radio', header{ii}, {@Parameters, panelName}, 0, 'Select parameter to add it to the environmental niche Model\nDeselesct parameter to remove it from model' });
end

% Add buttons to make the env. model and finish to close the window
EnvWindow.GUIbuttons( panelName,'add',...
    { 'space',      ' ',          [],                         [], '';
      'pushbutton', 'Make Model', {@EnvModel,     panelName}, [], 'Create environmental niche Model';
      'pushbutton', 'Done',       {@LoadEnvModel, panelName}, [], "I don't really do anything yet. \nBut I will!!";
    });


Panel = EnvWindow.Panels(panelName);   % Get the new version of the panel from its mapped container

% Turn off "Make Model" and "Done" buttons
Panel.button(length(header)+2).Push.Visible  = 'off';  % Make Model
Panel.button(length(header)+3).Push.Visible  = 'off';  % Done


% Deturmin properties to be used for the EKF filter when mapping water parameters -------------------------------------------------------------------------------
% Set outline for the EKF
if ~isempty(Boundaries) && isa(Boundaries, 'double')                                    % Use Boundaries if the Occ. Grid has been made
    outline = Boundaries;
    
elseif ~isempty(shape)                                                                  % Use the shape file in absence of the Occ. Grid

    if shape(1) > 0
        outline = fliplr(shape);                                                        % Make sure the waypoints are ordered [Lon Lat]
    else
        outline = shape;
    end
    
else                                                                                    % If both variables are empty, send an empty array
    outline = [];
end

res = 1;                                                                                % Gid cell resolution --> 1 meter
[xGrid, yGrid] = EKF_Prep(vehicle(:,2), vehicle(:,1), 'GridCell', res,'shape',outline); % Process area information to prepare for water peramiter mapping
EnvWindow.BackGround('LON',xGrid,'LAT',yGrid,'GeoData',geoData,'GeoImage',geoImage);    % Set the xGrid and yGrid ans georeferancing for the Envwindow.

if ~isempty(outline)
EnvWindow.Addlayer('Boundaries', outline, panelName);                                   % Dispaly outline on the GUI
end

set(EnvWindow.Figure, 'pointer', 'arrow')
EnvWindow.Header.String = 'Select Data Parameters For Env. Modle';                      % Prompt to select data
drawnow;
end


function Parameters(source,event,fromPanel)
global EnvWindow;       % GUI window
global Model;           % Area model being developed by this app

EnvWindow.Header.String = 'Select / Deselect Data Parameters For Env. Modle or Set Thresholds';                             % Prompt to select data

% Creat a button Panel for working with the Env. Niche
panelName = 'Niche Model';
allPanels = keys(EnvWindow.Panels);
if ~contains(allPanels, panelName)
    EnvWindow.Axes.Position = [0.1 0.1 0.55 0.7];                                   % Resize the GUI's dispaly area to accomidate for the new panel1
    EnvWindow.GUIpanels(panelName,'make','position',[0.7 0 0.1 1],'backgroundcolor',[0.9294    0.6902    0.1294]);  % Create putton panel for primary GUI functions
    EnvWindow.GUIbuttons( panelName,'add',{'text', 'Thresholds', [], [], '' });
end

parameters = cat(1,Model.MapParameter);
index = ismember(parameters, source.Tag);

% If Layer was just turned on generate a parameter map _________________________________________________________________________________
if event.Source.Value && ~any(index)
    % Isolate the selected parameter
    header = Model.Header;     % Header for the water chemistry matrix
    column = ismember(header, event.Source.String);
    
    vehicle   = Model.Vehicle;                    % Latitude, Longitude, Depth from surface
    latitude  = vehicle(:,1);
    longitude = vehicle(:,2);
    
    data      = Model.Data;
    parameter = data(:,column);
    
    dataMax  = max(parameter,[],1);
    dataMean = mean(parameter,1);
    dataSTD  = std(parameter,1);
    dataMin  = min(parameter,[],1);
    
    window = 40;
    sig = 2;
    
    set(EnvWindow.Figure, 'pointer', 'watch')
    drawnow;
    
    parameterMap = EKF( longitude, latitude, parameter,'Window', window, 'sigma', sig );
    
    set(EnvWindow.Figure, 'pointer', 'arrow')
    drawnow;
    
    EnvWindow.Addlayer(event.Source.String,  parameterMap, fromPanel);   % Dispaly shape on the GUI
    
    EnvWindow.GUIbuttons( panelName,'add',{'edit', event.Source.String, @SetThresholds, 0, '' });
    
    if isempty(Model(1).WaterMap)
        l = 1;
    else
        l = length(Model)+1;
    end
    
    Model(l).WaterMap          = parameterMap;
    Model(l).MapParameter      = {event.Source.String};
    Model(l).ParamiterSettings = [max(parameterMap(:)), min(parameterMap(:))];
    Model(l).WaterMapIO        = true;
    Model(l).ParameterStats    = [dataMax, dataMean, dataSTD, dataMin];
    
    % Parameter was turned back on. Map already exists, re-activate it _____________________________________________________________________
elseif event.Source.Value && any(index)
    Model(index).WaterMapIO = event.Source.Value;
    EnvWindow.RestoreLayer(source.Tag);
    EnvWindow.GUIbuttons( panelName,'add',{'edit', event.Source.String, @SetThresholds, 0, '' });
    
    
    % If parameter has been de-selected, turn off the layer and remove buttons _____________________________________________________________
elseif any(index)
    Model(index).WaterMapIO = event.Source.Value;
    EnvWindow.GUIbuttons( panelName, 'remove', {source.Tag});
    EnvWindow.HideLayer( source.Tag );
    
else
    warning('Unrecognized state')
    
end


end


function SetThresholds(source,event)
global EnvWindow;       % Environmental Niche Modeling GUI window
global Model; 

parameters = cat(1,Model.MapParameter);
index = ismember(parameters, source.Tag);

a = Model(index).ParamiterSettings;

if source.Value
    a(1) = str2double(event.Source.String);   % Set Max value
else
    a(2) = str2double(event.Source.String);   % Set Min value
end

Model(index).ParamiterSettings = a;


EnvWindow.Header.String = 'Select / Deselect Data Parameters For Env. Modle, Set Thresholds or Make Env. Model';                             % Prompt to select data

% Make the "Make Model" button visible
Panel = EnvWindow.Panels('Parameters');   % Get Panel from its mapped container
Panel.button(length(Panel.button)-1).Push.Visible  = 'on';  % Make Model

end


function EnvModel(~,~,panelName)
global EnvWindow;       % GUI window
global Model;           % Area model being developed by this app
global ekfProperties

disp('Make Env. Model')

EnvModel = double(ekfProperties{3});

for iter = 1:length(Model)
    
    if Model(iter).WaterMapIO
        
        % Make the probability disrtibuition map ---------------------------------------------------------------------------------------------------------
        disp(Model(iter).MapParameter)                                      % Dispaly which water permaiters are being used in the Niche Model
        
        range = Model(iter).ParamiterSettings;                              % Get the peramiters range, mean and STD
        delta = range(1) - range(2);
        mu = mean(range);
        sigma = (delta)/6;
                
        dif = abs(mu - Model(iter).WaterMap);                               % Find the diferance between the mean value of the probability distribution and the water parameter map
        lowerBound = mu - dif;                                              % Calculate lower boundary of pdf integration
        upperBound = mu + dif;                                              % Calculate upper boundary of pdf integration
        
        % 1 - interagl of pdf from lower to upper boundary give the probabillity of the speciec ocuring in these conditions
        probabilityMap = 1 - (cdf('Normal', upperBound, mu, sigma) - cdf('Normal', lowerBound, mu, sigma)); 
        
        probabilityMap( isnan(Model(iter).WaterMap) ) = nan;                % Remove values outside of the data area
        
        EnvModel = EnvModel .* probabilityMap;                              % Combine the probabilities
        
        
        % Dispaly probabilty disrtibution for water parameters ------------------------------------------------------------------------------
        if true
            distMax = range(1) + delta/2;                                   % Create a ploting domaine
            distMin = range(2) - delta/2;
            X = distMin: delta/200: distMax;
           
            pd = pdf('Normal', X, mu, sigma);                               % Create a probabiltiy distributiion function about the mean --> Area is normalized
            
            sigma3 = 3 * sigma;
            top = max(pd)/4;
            
            name = Model(iter).MapParameter;
            figure('Name', name{:})
            hold on
            
            plot(X,pd)
            plot([mu-sigma3, mu-sigma3], [0, top],'color','r');
            plot([mu+sigma3, mu+sigma3], [0, top],'color','r');
            
            hold off
        end
        
    else
        continue
    end
end

Model(1).EnvNicheModel = EnvModel;
EnvWindow.Addlayer('Env. Nich Model',  EnvModel, panelName);   % Dispaly Environmenatal Niche Model on the GUI

% Turn on the "Done" buttons
Panel = EnvWindow.Panels(panelName);   % Get the panel from its mapped container
Panel.button(length(Panel.button)).Push.Visible  = 'on';

end


function LoadEnvModel(~,~)
global EnvWindow;       % GUI window

close(EnvWindow.Figure);  % Close the Environmental Niche Modeling window
end





%% Supporitng Functions ==================================================================

function [xGrid, yGrid] = EKF_Prep(x, y, varargin)
global ekfProperties;   % Values used to set up the EKF filter

% Initalize parameters that can be change by the varargin --------------------------------------------------------------
gridCellResolution = 0.1;
shape = [];

% Get Additional Input peramiters ---------------------------------------------------------------------------------------
if  nargin > 1
    
    for i=1:length(varargin)
        try
            
            switch lower(cell2mat(varargin(i)))
                
                case 'gridcell'                             % Get grid cell resolution
                    gridCellResolution = varargin{i+1};
                    
                    
                case 'shape'                                % Get outline for the filter area
                    shape = varargin{i+1};
                    
                otherwise
                    continue
            end
            
        catch
            continue
            
        end
    end
end

% Create boundary map ------------------------------------------------------------------------------------

if isempty(shape) 
    k = boundary(x,y);
    edgePoints = [x(k),y(k)];
else
    edgePoints = shape;
    if edgePoints(1,1) > 0
        edgePoints = fliplr(edgePoints);
    end
end

% Finde the origen of the data set
delta = 0.00008;
Origin(1) = min(edgePoints(:,1))-delta;
Origin(2) = min(edgePoints(:,2))-delta;

% Deteruming the oposite corner of the data grid
Lmax(1) = max(edgePoints(:,1))+delta;
Lmax(2) = max(edgePoints(:,2))+delta;

% Get dimensions in meters
%  s = vdist(lat1, lon1, lat2,   lon2)
xDim = vdist(Origin(2),Origin(1),Origin(2),  Lmax(1));  % Change in Longitude
yDim = vdist(Origin(2),Origin(1),Lmax(2),Origin(1));    % Change in Latatude

% Size of the map  m-rows x n-columns
m = ceil(yDim/gridCellResolution);
n = ceil(xDim/gridCellResolution);

% Create Area mesh
x_vec = linspace(Origin(1),Lmax(1), n);
y_vec = linspace(Origin(2),Lmax(2), m);
[xGrid, yGrid] = meshgrid(x_vec, y_vec);

% Create a logic map of the area insied the bound area
dataArea    = inpolygon(xGrid,yGrid,edgePoints(:,1),edgePoints(:,2));


ekfProperties{1} = Origin;
ekfProperties{2} = gridCellResolution;
ekfProperties{3} = dataArea;
%ekfProperties{4} = [m, n];


end





%% Previous Probability distribution
%         % Make the probability disrtibuition ---------------------------------------------------------------------------------------------------------
%         disp(Model(iter).MapParameter)                                      % Dispaly which water permaiters are being used in the Niche Model
%         
%         range = Model(iter).PeramiterSettings;                              % Get the peramiters range, mean and STD
%         delta = range(1) - range(2);
%         mu = mean(range);
%         sigma = (delta)/4;
%         
%         pdMax = pdf('Normal', mu, mu, sigma);                               % Get max value of the Probability Density Function to normalize its range
%         probabilityMap = pdf('Normal', Model(iter).WaterMap, mu, sigma);    % Generate a probability map
%         probabilityMap = probabilityMap/pdMax;                              % Normalize the pdf range
%         
%         probabilityMap( isnan(Model(iter).WaterMap) ) = nan;                % Remove values outside of the data area
%         
%         EnvModel = EnvModel .* probabilityMap;                              % Combine the probabilities
%         
%         
%         % Dispaly water peramiter map, probability map and probabilty disrtibution -------------------------------------------------------------------
%         distMax = range(1) + delta/2;                                       % Create a ploting domaine
%         distMin = range(2) - delta/2;
%         X = distMin: delta/200: distMax;
%         
%         pd = pdf('Normal', X, mu, sigma);                                   % Create a probabiltiy distributiion function about the mean --> Area is normalized
%         normpd = pd/max(pd);                                                % Normalize the range of the pdf
%         Sigmaline = pdf('Normal', mu-sigma, mu, sigma)/pdMax;
%         Sigmaline = repmat(Sigmaline,1,numel(X));
%         CuttOff = pdf('Normal', range(1), mu, sigma)/pdMax;
%         CuttOff = repmat(CuttOff,1,numel(X));
%         
%         name = Model(iter).MapParameter;
%         figure('Name', name{:})
%         
%         subplot(1,3,1)
%         [c,h] = contourf(xGrid, yGrid, Model(iter).WaterMap, 'k');
%         clabel(c,h,'FontSize',8)
%         colorbar
%         title('Parameter Map')
%         
%         subplot(1,3,2)
%         [c,h] = contourf(xGrid, yGrid, probabilityMap, 'k');
%         clabel(c,h,'FontSize',8)
%         caxis([0, 1.05])
%         colorbar
%         title('PDF')
%         
%         subplot(1,3,3)
%         hold on
%         plot(X,normpd)
%         plot(mu-sigma, 0,'*','color','r');
%         plot(mu+sigma, 0,'*','color','r');
%         plot(mu,0,'*');
%         plot(X,Sigmaline,'color','r')
%         plot(X,CuttOff)
%         
%         hold off
%         
%         drawnow
        
        
        
